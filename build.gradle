plugins {
  id 'java'
  id 'jacoco'
  id 'application'
  id 'com.adarshr.test-logger' version '1.6.0' apply true
  id 'com.github.johnrengelman.shadow' version '5.2.0' apply true
}

compileJava {
  sourceCompatibility = 11
  targetCompatibility = 11
}

repositories {
  mavenCentral()
  maven {
    url "https://plugins.gradle.org/m2/"
  }
}

shadowJar {
  mergeServiceFiles()
  dependsOn test
  zip64 true
  archiveBaseName = 'warpApp'
}

tasks.withType(Test) {
  useJUnitPlatform()
}

jacoco {
  toolVersion = "0.8.4"
}

jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled false
  }
}

dependencies {
  implementation fileTree(dir: 'lib', include: ['*.jar'])

  // https://mvnrepository.com/artifact/commons-io/commons-io
  implementation group: 'commons-io', name: 'commons-io', version: '2.6'

  // https://mvnrepository.com/artifact/org.projectlombok/lombok
  compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.+'
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.+'

  // https://mvnrepository.com/artifact/org.projectlombok/lombok (These are required in addition to the above)
  testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.+'
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.+'

  // https://mvnrepository.com/artifact/org.mockito/mockito-core
  testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.2.0'

  // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.11.0'
  // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.0'

  // Junit
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.+'
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.+'
}

test {
  testLogging {
    exceptionFormat = 'full'
  }
  onOutput { descriptor, event ->
    if (event.destination == TestOutputEvent.Destination.StdErr) {
      logger.error("Test: " + descriptor.toString() + ", error: " + event.message.toString())
    }
  }
}
